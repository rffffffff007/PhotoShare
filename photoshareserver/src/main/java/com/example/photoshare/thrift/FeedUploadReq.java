/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.example.photoshare.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FeedUploadReq implements org.apache.thrift.TBase<FeedUploadReq, FeedUploadReq._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeedUploadReq");

  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("user_name", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PHOTO_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("photo_data", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField FEED_DESC_FIELD_DESC = new org.apache.thrift.protocol.TField("feed_desc", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeedUploadReqStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeedUploadReqTupleSchemeFactory());
  }

  public String user_name; // required
  public ByteBuffer photo_data; // required
  public String feed_desc; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USER_NAME((short)1, "user_name"),
    PHOTO_DATA((short)2, "photo_data"),
    FEED_DESC((short)3, "feed_desc");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_NAME
          return USER_NAME;
        case 2: // PHOTO_DATA
          return PHOTO_DATA;
        case 3: // FEED_DESC
          return FEED_DESC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("user_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO_DATA, new org.apache.thrift.meta_data.FieldMetaData("photo_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.FEED_DESC, new org.apache.thrift.meta_data.FieldMetaData("feed_desc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeedUploadReq.class, metaDataMap);
  }

  public FeedUploadReq() {
  }

  public FeedUploadReq(
    String user_name,
    ByteBuffer photo_data,
    String feed_desc)
  {
    this();
    this.user_name = user_name;
    this.photo_data = photo_data;
    this.feed_desc = feed_desc;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeedUploadReq(FeedUploadReq other) {
    if (other.isSetUser_name()) {
      this.user_name = other.user_name;
    }
    if (other.isSetPhoto_data()) {
      this.photo_data = org.apache.thrift.TBaseHelper.copyBinary(other.photo_data);
;
    }
    if (other.isSetFeed_desc()) {
      this.feed_desc = other.feed_desc;
    }
  }

  public FeedUploadReq deepCopy() {
    return new FeedUploadReq(this);
  }

  @Override
  public void clear() {
    this.user_name = null;
    this.photo_data = null;
    this.feed_desc = null;
  }

  public String getUser_name() {
    return this.user_name;
  }

  public FeedUploadReq setUser_name(String user_name) {
    this.user_name = user_name;
    return this;
  }

  public void unsetUser_name() {
    this.user_name = null;
  }

  /** Returns true if field user_name is set (has been assigned a value) and false otherwise */
  public boolean isSetUser_name() {
    return this.user_name != null;
  }

  public void setUser_nameIsSet(boolean value) {
    if (!value) {
      this.user_name = null;
    }
  }

  public byte[] getPhoto_data() {
    setPhoto_data(org.apache.thrift.TBaseHelper.rightSize(photo_data));
    return photo_data == null ? null : photo_data.array();
  }

  public ByteBuffer bufferForPhoto_data() {
    return photo_data;
  }

  public FeedUploadReq setPhoto_data(byte[] photo_data) {
    setPhoto_data(photo_data == null ? (ByteBuffer)null : ByteBuffer.wrap(photo_data));
    return this;
  }

  public FeedUploadReq setPhoto_data(ByteBuffer photo_data) {
    this.photo_data = photo_data;
    return this;
  }

  public void unsetPhoto_data() {
    this.photo_data = null;
  }

  /** Returns true if field photo_data is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto_data() {
    return this.photo_data != null;
  }

  public void setPhoto_dataIsSet(boolean value) {
    if (!value) {
      this.photo_data = null;
    }
  }

  public String getFeed_desc() {
    return this.feed_desc;
  }

  public FeedUploadReq setFeed_desc(String feed_desc) {
    this.feed_desc = feed_desc;
    return this;
  }

  public void unsetFeed_desc() {
    this.feed_desc = null;
  }

  /** Returns true if field feed_desc is set (has been assigned a value) and false otherwise */
  public boolean isSetFeed_desc() {
    return this.feed_desc != null;
  }

  public void setFeed_descIsSet(boolean value) {
    if (!value) {
      this.feed_desc = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case USER_NAME:
      if (value == null) {
        unsetUser_name();
      } else {
        setUser_name((String)value);
      }
      break;

    case PHOTO_DATA:
      if (value == null) {
        unsetPhoto_data();
      } else {
        setPhoto_data((ByteBuffer)value);
      }
      break;

    case FEED_DESC:
      if (value == null) {
        unsetFeed_desc();
      } else {
        setFeed_desc((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_NAME:
      return getUser_name();

    case PHOTO_DATA:
      return getPhoto_data();

    case FEED_DESC:
      return getFeed_desc();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case USER_NAME:
      return isSetUser_name();
    case PHOTO_DATA:
      return isSetPhoto_data();
    case FEED_DESC:
      return isSetFeed_desc();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeedUploadReq)
      return this.equals((FeedUploadReq)that);
    return false;
  }

  public boolean equals(FeedUploadReq that) {
    if (that == null)
      return false;

    boolean this_present_user_name = true && this.isSetUser_name();
    boolean that_present_user_name = true && that.isSetUser_name();
    if (this_present_user_name || that_present_user_name) {
      if (!(this_present_user_name && that_present_user_name))
        return false;
      if (!this.user_name.equals(that.user_name))
        return false;
    }

    boolean this_present_photo_data = true && this.isSetPhoto_data();
    boolean that_present_photo_data = true && that.isSetPhoto_data();
    if (this_present_photo_data || that_present_photo_data) {
      if (!(this_present_photo_data && that_present_photo_data))
        return false;
      if (!this.photo_data.equals(that.photo_data))
        return false;
    }

    boolean this_present_feed_desc = true && this.isSetFeed_desc();
    boolean that_present_feed_desc = true && that.isSetFeed_desc();
    if (this_present_feed_desc || that_present_feed_desc) {
      if (!(this_present_feed_desc && that_present_feed_desc))
        return false;
      if (!this.feed_desc.equals(that.feed_desc))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(FeedUploadReq other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    FeedUploadReq typedOther = (FeedUploadReq)other;

    lastComparison = Boolean.valueOf(isSetUser_name()).compareTo(typedOther.isSetUser_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUser_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.user_name, typedOther.user_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhoto_data()).compareTo(typedOther.isSetPhoto_data());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto_data()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo_data, typedOther.photo_data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeed_desc()).compareTo(typedOther.isSetFeed_desc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeed_desc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feed_desc, typedOther.feed_desc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeedUploadReq(");
    boolean first = true;

    sb.append("user_name:");
    if (this.user_name == null) {
      sb.append("null");
    } else {
      sb.append(this.user_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("photo_data:");
    if (this.photo_data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.photo_data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("feed_desc:");
    if (this.feed_desc == null) {
      sb.append("null");
    } else {
      sb.append(this.feed_desc);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeedUploadReqStandardSchemeFactory implements SchemeFactory {
    public FeedUploadReqStandardScheme getScheme() {
      return new FeedUploadReqStandardScheme();
    }
  }

  private static class FeedUploadReqStandardScheme extends StandardScheme<FeedUploadReq> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeedUploadReq struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.user_name = iprot.readString();
              struct.setUser_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PHOTO_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo_data = iprot.readBinary();
              struct.setPhoto_dataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FEED_DESC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feed_desc = iprot.readString();
              struct.setFeed_descIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeedUploadReq struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.user_name != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.user_name);
        oprot.writeFieldEnd();
      }
      if (struct.photo_data != null) {
        oprot.writeFieldBegin(PHOTO_DATA_FIELD_DESC);
        oprot.writeBinary(struct.photo_data);
        oprot.writeFieldEnd();
      }
      if (struct.feed_desc != null) {
        oprot.writeFieldBegin(FEED_DESC_FIELD_DESC);
        oprot.writeString(struct.feed_desc);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeedUploadReqTupleSchemeFactory implements SchemeFactory {
    public FeedUploadReqTupleScheme getScheme() {
      return new FeedUploadReqTupleScheme();
    }
  }

  private static class FeedUploadReqTupleScheme extends TupleScheme<FeedUploadReq> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeedUploadReq struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetUser_name()) {
        optionals.set(0);
      }
      if (struct.isSetPhoto_data()) {
        optionals.set(1);
      }
      if (struct.isSetFeed_desc()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetUser_name()) {
        oprot.writeString(struct.user_name);
      }
      if (struct.isSetPhoto_data()) {
        oprot.writeBinary(struct.photo_data);
      }
      if (struct.isSetFeed_desc()) {
        oprot.writeString(struct.feed_desc);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeedUploadReq struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.user_name = iprot.readString();
        struct.setUser_nameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.photo_data = iprot.readBinary();
        struct.setPhoto_dataIsSet(true);
      }
      if (incoming.get(2)) {
        struct.feed_desc = iprot.readString();
        struct.setFeed_descIsSet(true);
      }
    }
  }

}

